What is time complexity and what is its relation to algorithms?
Time complexity is the metric used to describe algorithm efficiency. 
It is expressed as a function and estimates the time it takes to execute a program. 
Time complexity is determined by calculating how quickly the time to run the program grows relative to the amount of input we feed it. 

What is runtime?
Runtime is the amount of time an algorithm takes to run. It refers to the physical time duration. 

How is the runtime of an algorithm calculated?
The runtime of an algorithm is calculated by: 1. Adding up how many instructions the algorithm will execute as a function of the size of its input. 2. Simplify the expression to the largest term and drop all constants.  

Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. 
Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.
1.Constant, 2.logarithmic, 3.linear, 4.log linear, 5.quadratic, 6.cubic, 7.exponential.
Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A:The above code has a time complexity of O(n) (linear)

Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: Time complexity is O(n^2) (exponential)

Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: Time complexity is O(1)

Out of the code snippets you just saw, which is the most time efficient?
The most efficient is the last one, the fibonaci sequence with a time efficiency of O(1).