//6

var hash = (string, max) => {
  var hash = 0;
  for (var i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return (hash % max);
};

let HashTable = function() {

  let storage = [];
  const storageLimit = 300;

  this.add = function(key, value) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [
        [key,value]
      ];
    } else {
      var inserted = false;
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          storage[index][i][1] = value;
          inserted = true;
        }
      }
      if (inserted === false) {
        storage[index].push([key,value]);
      }
    }
  };

  this.search = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      return undefined;
    } else {
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          return storage[index][i][1];
        }
      }
    }
  };

};


var hashTable = new HashTable();
hashTable.add(1,{name:'Jerry', address:' 123 Sesame St.'})
hashTable.add(2,{name:'Jack',address:'86 Albany Ave'});
hashTable.add(3,{name:'Jeff',address:'453 Hackmatack St.'});

console.log(hashTable.search(1));
console.log(hashTable.search(2));
console.log(hashTable.search(3));



//7 
var hash = (string, max) => {
  var hash = 0;
  for (var i = 0; i < string.length;i++) {
    hash += string.charCodeAt(i)
  }
  return hash % max;
};

let HashTable = function() {
 let storage = [];
 const storageLimit= 5;

 this.add = function(key, value) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [
        [key, value]
      ];
    } else {
      var inserted = false;
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          storage[index][i][1] = value;
          inserted = true;
        }
      }
      if (inserted === false) {
        storage[index].push([key, value]);
      }
    }
  };
  
  this.search = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      return undefined;
    } else {
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          return storage[index][i][1];
        }
      }
    }
  };
};

var hash_Table = new HashTable();
hash_Table.add('apples', 1000);
var apples = (hash_Table.search('apples'));
console.log(apples);



//8. Build a system that allows digital copies of newspapers to be entered adn searched by publisher and publication date. Use hash tables to store the necessary data 

let hash = (string, max)=>{
  var hash = 0;
  for (var i = 0; i < string.length; i++){
    hash+= string.charCodeAt(i);
  }
  return hash % max;
}
class Newspaper{
  constructor(){
    this.storage = [];
    this.storageLimit = 100;
  }
  
  add(publisher, publicationDate){
    let key = (publisher + publicationDate);
    let index = hash(key, this.storageLimit);
    let data = [publisher, publicationDate];
      if (this.storage[index] === undefined) {
        this.storage[index] = [];
      }
    this.storage[index].push(data);
   }
  
  search(publisher, publicationDate){
    let key = (publisher + publicationDate);
    let index = hash(key, this.storageLimit);
    let results = [];
    
    if (!this.storage[index])    { 
      results = "No results found"; 
    }
    this.storage[index].forEach(entry => {
      if (entry[0] === publisher && entry[1] === publicationDate){
        results.push(entry);
        }
      })
    return results;
  }
}

let news = new Newspaper();
news.add('Wall Street Journal', '2019');

var answer = news.search('Wall Street Journal', '2019');
console.log(answer);

