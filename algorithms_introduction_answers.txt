Using proper pseudo-code, describe the following primitive algorithms:

Making coffee;
FUNCTION
IF consumer wants coffee
	ADD coffee beans to coffee machine
	ADD water to coffee pot
	ADD coffee pot to coffee machine
	START coffee machine
	WHILE coffee machine is running
		WAIT
	POUR coffee into coffee cup
	IF consumer wants sugar 
		WHILE desired_Sugar_Level is less than current sugar level
			ADD sugar
	IF consumer wants creamer
		WHILE desired cream level is less than current cream level
			ADD cream
END


WASHING DISHES;
FUNCTION
CHECK dishes_Status
	IF dishes status is dirty
		PUT dishes in dishwasher
		ADD soap to dishwasher
		SEAL dishwasher door
		START dishwasher 
		WHILE dishwasher is running
			WAIT
		PUT away dishes
	ELSE
END

A choice of your own.

MAKING ICE;
FUNCTION
FIND ice tray
PLACE ice tray over sink
TURN on water
WHILE ice tray filled percent is less than eighty percent
	WAIT
PUT water in ice tray
PUT waterfilled ice tray in freezer

CLOSE freezer
WAIT
END



As with the knot algorithm, there may be more than one way to solve the problem. It is essential to try to pick the best algorithm for a situation. 
Name three companies who created an algorithm that made them successful, e.g., Google's search algorithm. 
It doesn't need to be a tech example (such as a recipe or manufacturing a product). 
Google's algorithm produces more relevant results than other search engines; what about each of your cases make them stand out?
Ford's assembly line manufacturing process and delination of roles.
Garmin's Point A to B mapping solution algorithm.
McDonald's food standardization and assembly algorithm.


Hypothesize about what constitutes an efficient algorithm versus an inefficient algorithm.
Time complexity (and Big O Notation).
Resource complexity (whether human or not).
Comprehension complexity (does the person/machine/etc. understand what is supposed to be done).
